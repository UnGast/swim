#if !canImport(ObjectiveC)
import XCTest

extension ArithmeticPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArithmeticPerformanceTests = [
        ("testMul", testMul),
        ("testMulAssignImage", testMulAssignImage),
        ("testMulAssignImageEquivalent", testMulAssignImageEquivalent),
        ("testMulAssignPixel", testMulAssignPixel),
        ("testMulAssignPixelEquivalent", testMulAssignPixelEquivalent),
        ("testMulAssignScalar", testMulAssignScalar),
        ("testMulAssignScalarEquivalent", testMulAssignScalarEquivalent),
    ]
}

extension BasicPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BasicPerformanceTests = [
        ("testInterleave", testInterleave),
        ("testInterleave_accelerate", testInterleave_accelerate),
        ("testMultiplyImage", testMultiplyImage),
        ("testMultiplyImage_accelerate", testMultiplyImage_accelerate),
        ("testMultiplyPixel", testMultiplyPixel),
        ("testMultiplyPixel_accelerate", testMultiplyPixel_accelerate),
    ]
}

extension BayerPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BayerPerformanceTests = [
        ("testBayer", testBayer),
        ("testDemosaic", testDemosaic),
        ("testDemosaic_Int", testDemosaic_Int),
    ]
}

extension BlendPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BlendPerformanceTests = [
        ("testAdditiveBlend", testAdditiveBlend),
        ("testMultiplyBlend", testMultiplyBlend),
        ("testOverlayBlend", testOverlayBlend),
        ("testScreenBlend", testScreenBlend),
    ]
}

extension ConversionPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConversionPerformanceTests = [
        ("testChannelwiseConvert", testChannelwiseConvert),
        ("testChannelwiseConverted", testChannelwiseConverted),
        ("testCompundRGBA", testCompundRGBA),
        ("testCompundRGBA2", testCompundRGBA2),
        ("testGrayToRGB", testGrayToRGB),
        ("testPixelwiseConvert", testPixelwiseConvert),
        ("testPixelwiseConverted", testPixelwiseConverted),
        ("testRGBAToARGB", testRGBAToARGB),
        ("testRGBAToRGB", testRGBAToRGB),
        ("testRGBToGray", testRGBToGray),
        ("testRGBToRGBA", testRGBToRGBA),
        ("testToGrayDouble", testToGrayDouble),
        ("testToGrayInt", testToGrayInt),
    ]
}

extension CorrelationPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CorrelationPerformanceTests = [
        ("testMaskedNCC", testMaskedNCC),
        ("testMaskedSAD", testMaskedSAD),
        ("testMaskedSSD", testMaskedSSD),
        ("testMaskedZNCC", testMaskedZNCC),
        ("testNCC", testNCC),
        ("testSAD", testSAD),
        ("testSSD", testSSD),
        ("testZNCC", testZNCC),
    ]
}

extension DataTypeConversionPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DataTypeConversionPerformanceTests = [
        ("testFloatToDouble", testFloatToDouble),
        ("testUInt8ToDouble", testUInt8ToDouble),
    ]
}

extension DrawPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DrawPerformanceTests = [
        ("testDrawCircle", testDrawCircle),
        ("testDrawCirclePelimeter", testDrawCirclePelimeter),
        ("testDrawHorizontalLine", testDrawHorizontalLine),
        ("testDrawImage", testDrawImage),
        ("testDrawImageAlphaBlend", testDrawImageAlphaBlend),
        ("testDrawImageWithmask", testDrawImageWithmask),
        ("testDrawLine", testDrawLine),
        ("testDrawPolygon", testDrawPolygon),
        ("testDrawRect", testDrawRect),
        ("testDrawRectPelimeter", testDrawRectPelimeter),
    ]
}

extension FilterPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FilterPerformanceTests = [
        ("testBilateralFilter", testBilateralFilter),
        ("testConvolution", testConvolution),
        ("testNLMeanFilter", testNLMeanFilter),
        ("testRankFilterMaximum", testRankFilterMaximum),
        ("testRankFilterMedian", testRankFilterMedian),
    ]
}

extension FourierTransformerPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FourierTransformerPerformanceTests = [
        ("testFFT", testFFT),
        ("testFFTShift", testFFTShift),
        ("testFFTShifted", testFFTShifted),
        ("testFFTSquare", testFFTSquare),
        ("testIFFT", testIFFT),
    ]
}

extension ImageIOPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImageIOPerformanceTests = [
        ("testRead", testRead),
        ("testWrite", testWrite),
    ]
}

extension InterpolatorPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InterpolatorPerformanceTests = [
        ("testBC", testBC),
        ("testBL", testBL),
        ("testNN", testNN),
    ]
}

extension IterationPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IterationPerformanceTests = [
        ("testChannelConvert1", testChannelConvert1),
        ("testChannelConvert2", testChannelConvert2),
        ("testChannelConvert3", testChannelConvert3),
        ("testChannelConvert4", testChannelConvert4),
        ("testIteration1", testIteration1),
        ("testIteration2", testIteration2),
        ("testIterationPixelValues1", testIterationPixelValues1),
        ("testIterationPixelValues2", testIterationPixelValues2),
        ("testMutableIteration1", testMutableIteration1),
        ("testMutableIteration2", testMutableIteration2),
        ("testMutableIteration3", testMutableIteration3),
        ("testMutableIteration4", testMutableIteration4),
    ]
}

extension ManipulationPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ManipulationPerformanceTests = [
        ("testAbs", testAbs),
        ("testCeil", testCeil),
        ("testClip", testClip),
        ("testFloor", testFloor),
        ("testPow", testPow),
        ("testRound", testRound),
        ("testTrunc", testTrunc),
    ]
}

extension PerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PerformanceTests = [
        ("testCombinationA", testCombinationA),
        ("testCombinationB", testCombinationB),
        ("testEqual", testEqual),
        ("testFillPixelInit", testFillPixelInit),
        ("testHistogramEqualize", testHistogramEqualize),
        ("testHistogramEqualizeDouble", testHistogramEqualizeDouble),
        ("testIm2col", testIm2col),
        ("testIntegralImage", testIntegralImage),
    ]
}

extension ResizePerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResizePerformanceTests = [
        ("testResizeAA", testResizeAA),
        ("testResizeAA_Upscale", testResizeAA_Upscale),
        ("testResizeBC", testResizeBC),
        ("testResizeBL", testResizeBL),
        ("testResizeBLPlain", testResizeBLPlain),
        ("testResizeLanczos2", testResizeLanczos2),
        ("testResizeLanczos3", testResizeLanczos3),
        ("testResizeNN", testResizeNN),
        ("testResizeNN_UInt8", testResizeNN_UInt8),
    ]
}

extension SubscriptPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubscriptPerformanceTests = [
        ("testChannelSubscriptGet", testChannelSubscriptGet),
        ("testChannelSubscriptSet", testChannelSubscriptSet),
        ("testSubimageSubscriptGet", testSubimageSubscriptGet),
        ("testSubimageSubscriptSet", testSubimageSubscriptSet),
    ]
}

extension TransformationPerformanceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransformationPerformanceTests = [
        ("testFlipLR", testFlipLR),
        ("testFlipUD", testFlipUD),
        ("testPadding", testPadding),
        ("testRot180", testRot180),
        ("testRot90", testRot90),
        ("testShifted", testShifted),
        ("testTranspose", testTranspose),
        ("testWarp", testWarp),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArithmeticPerformanceTests.__allTests__ArithmeticPerformanceTests),
        testCase(BasicPerformanceTests.__allTests__BasicPerformanceTests),
        testCase(BayerPerformanceTests.__allTests__BayerPerformanceTests),
        testCase(BlendPerformanceTests.__allTests__BlendPerformanceTests),
        testCase(ConversionPerformanceTests.__allTests__ConversionPerformanceTests),
        testCase(CorrelationPerformanceTests.__allTests__CorrelationPerformanceTests),
        testCase(DataTypeConversionPerformanceTests.__allTests__DataTypeConversionPerformanceTests),
        testCase(DrawPerformanceTests.__allTests__DrawPerformanceTests),
        testCase(FilterPerformanceTests.__allTests__FilterPerformanceTests),
        testCase(FourierTransformerPerformanceTests.__allTests__FourierTransformerPerformanceTests),
        testCase(ImageIOPerformanceTests.__allTests__ImageIOPerformanceTests),
        testCase(InterpolatorPerformanceTests.__allTests__InterpolatorPerformanceTests),
        testCase(IterationPerformanceTests.__allTests__IterationPerformanceTests),
        testCase(ManipulationPerformanceTests.__allTests__ManipulationPerformanceTests),
        testCase(PerformanceTests.__allTests__PerformanceTests),
        testCase(ResizePerformanceTests.__allTests__ResizePerformanceTests),
        testCase(SubscriptPerformanceTests.__allTests__SubscriptPerformanceTests),
        testCase(TransformationPerformanceTests.__allTests__TransformationPerformanceTests),
    ]
}
#endif
