#if !canImport(ObjectiveC)
import XCTest

extension AbsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AbsTests = [
        ("testDouble", testDouble),
        ("testFloat", testFloat),
        ("testInt", testInt),
    ]
}

extension AffineTransformationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AffineTransformationTests = [
        ("testAffineTransform", testAffineTransform),
    ]
}

extension AppKitTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AppKitTests = [
        ("testColorToGray", testColorToGray),
        ("testGray", testGray),
        ("testGrayDouble", testGrayDouble),
        ("testGrayToColor", testGrayToColor),
        ("testRGBA", testRGBA),
        ("testRGBADouble", testRGBADouble),
    ]
}

extension BayerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BayerTests = [
        ("testBayered", testBayered),
        ("testDebayered", testDebayered),
    ]
}

extension BicubicInterpolationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BicubicInterpolationTests = [
        ("testInterpolate", testInterpolate),
    ]
}

extension BilinearInterpolationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BilinearInterpolationTests = [
        ("testInterpolate", testInterpolate),
    ]
}

extension BitOperationsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BitOperationsTests = [
        ("testAnd", testAnd),
        ("testNegate", testNegate),
        ("testOr", testOr),
        ("testXor", testXor),
    ]
}

extension ChannelCompositionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ChannelCompositionTests = [
        ("testCompound", testCompound),
    ]
}

extension ChannelSubscriptTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ChannelSubscriptTests = [
        ("testChannelSubscriptGet", testChannelSubscriptGet),
        ("testChannelSubscriptSet", testChannelSubscriptSet),
    ]
}

extension ChannelwiseConversionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ChannelwiseConversionTests = [
        ("testChannelwiseConvert", testChannelwiseConvert),
        ("testConvertChannel", testConvertChannel),
        ("testConvertRange", testConvertRange),
    ]
}

extension CheckBoolTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CheckBoolTests = [
        ("testAllFalse", testAllFalse),
        ("testAllTrue", testAllTrue),
        ("testHasFalse", testHasFalse),
        ("testHasTrue", testHasTrue),
    ]
}

extension ClampTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClampTests = [
        ("testClamp", testClamp),
    ]
}

extension ClipTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClipTests = [
        ("testClip", testClip),
    ]
}

extension ColorArithmeticTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ColorArithmeticTests = [
        ("testAddDouble", testAddDouble),
        ("testAddInt", testAddInt),
        ("testDivDouble", testDivDouble),
        ("testDivInt", testDivInt),
        ("testMulDouble", testMulDouble),
        ("testMulInt", testMulInt),
        ("testNegate", testNegate),
        ("testSubDouble", testSubDouble),
        ("testSubInt", testSubInt),
    ]
}

extension ComplexTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ComplexTests = [
        ("testAdd", testAdd),
        ("testDiv", testDiv),
        ("testInit", testInit),
        ("testMul", testMul),
        ("testNeg", testNeg),
        ("testSub", testSub),
    ]
}

extension ConcatenateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConcatenateTests = [
        ("testConcatH", testConcatH),
        ("testConcatV", testConcatV),
    ]
}

extension ConvolutionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConvolutionTests = [
        ("testConvoluted", testConvoluted),
        ("testGaussianFilter", testGaussianFilter),
    ]
}

extension CorrelationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CorrelationTests = [
        ("testNCC", testNCC),
        ("testSAD", testSAD),
        ("testScale", testScale),
        ("testSSD", testSSD),
        ("testZNCC", testZNCC),
    ]
}

extension DataTypeConversionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DataTypeConversionTests = [
        ("testCast", testCast),
        ("testRounding", testRounding),
    ]
}

extension DrawTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DrawTests = [
        ("testDrawImage", testDrawImage),
        ("testDrawRect", testDrawRect),
        ("testDrawRectPelimeter", testDrawRectPelimeter),
        ("testDrawText", testDrawText),
    ]
}

extension EdgeModeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EdgeModeTests = [
        ("testConstant", testConstant),
        ("testEdge", testEdge),
        ("testReflect", testReflect),
        ("testSymmetric", testSymmetric),
        ("testWrap", testWrap),
    ]
}

extension ExtremaTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExtremaTests = [
        ("testExtrema", testExtrema),
    ]
}

extension FilterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FilterTests = [
        ("testMaximumFilter", testMaximumFilter),
        ("testMedianFilter", testMedianFilter),
        ("testMinimumFilter", testMinimumFilter),
    ]
}

extension Im2colTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__Im2colTests = [
        ("testIm2Col", testIm2Col),
        ("testIm2Row", testIm2Row),
    ]
}

extension ImageArithmeticTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImageArithmeticTests = [
        ("testAddDouble", testAddDouble),
        ("testAddInt", testAddInt),
        ("testDivDouble", testDivDouble),
        ("testDivInt", testDivInt),
        ("testMulDouble", testMulDouble),
        ("testMulInt", testMulInt),
        ("testNegate", testNegate),
        ("testSubDouble", testSubDouble),
        ("testSubInt", testSubInt),
    ]
}

extension ImageIOTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImageIOTests = [
        ("testSaveLoadDouble", testSaveLoadDouble),
        ("testSaveLoadFloat", testSaveLoadFloat),
        ("testSaveLoadUInt8", testSaveLoadUInt8),
    ]
}

extension ImageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImageTests = [
        ("testCoW", testCoW),
        ("testEquality", testEquality),
        ("testInitialize", testInitialize),
    ]
}

extension IntegralImageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IntegralImageTests = [
        ("testToIntegralImage", testToIntegralImage),
    ]
}

extension LikeInitializerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LikeInitializerTests = [
        ("testLike", testLike),
    ]
}

extension NearestNeighborInterpolatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NearestNeighborInterpolatorTests = [
        ("testInterpolate", testInterpolate),
    ]
}

extension PaddingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PaddingTests = [
        ("testConstantPadding", testConstantPadding),
        ("testSymmetricPadding", testSymmetricPadding),
        ("testZeroPadding", testZeroPadding),
    ]
}

extension PixelIteratorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PixelIteratorTests = [
        ("testIterator", testIterator),
        ("testIteratorRange", testIteratorRange),
    ]
}

extension PixelRefArithmeticTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PixelRefArithmeticTests = [
        ("testAdd", testAdd),
        ("testDiv", testDiv),
        ("testMul", testMul),
        ("testSub", testSub),
    ]
}

extension PixelSubscriptTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PixelSubscriptTests = [
        ("testSubscriptGet", testSubscriptGet),
        ("testSubscriptSet", testSubscriptSet),
    ]
}

extension PixelTypeConversionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PixelTypeConversionTests = [
        ("testARGBtoRGBA", testARGBtoRGBA),
        ("testGrayToGrayAlpha", testGrayToGrayAlpha),
        ("testGrayToRGB", testGrayToRGB),
        ("testGrayToRGBA", testGrayToRGBA),
        ("testRGBAtoARGB", testRGBAtoARGB),
        ("testRGBAtoRGB", testRGBAtoRGB),
        ("testRGBtoRGBA", testRGBtoRGBA),
        ("testToGray", testToGray),
    ]
}

extension PixelwiseConversion {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PixelwiseConversion = [
        ("testConvert", testConvert),
        ("testConverted", testConverted),
        ("testConvertRange", testConvertRange),
    ]
}

extension PowerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PowerTests = [
        ("testPowDouble", testPowDouble),
        ("testPowFloat", testPowFloat),
    ]
}

extension ProjectiveTransformationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ProjectiveTransformationTests = [
        ("testProjectiveTransformation", testProjectiveTransformation),
    ]
}

extension RepeatedTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RepeatedTests = [
        ("testRepeated", testRepeated),
    ]
}

extension ResizeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResizeTests = [
        ("testResizeAA_downscale", testResizeAA_downscale),
        ("testResizeAA_downscale_separate", testResizeAA_downscale_separate),
        ("testResizeAA_separate", testResizeAA_separate),
        ("testResizeAA_upscale", testResizeAA_upscale),
        ("testResizeNN_UInt8", testResizeNN_UInt8),
    ]
}

extension RoundingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RoundingTests = [
        ("testCeil", testCeil),
        ("testFloor", testFloor),
        ("testRound", testRound),
        ("testTrunc", testTrunc),
    ]
}

extension ShiftTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ShiftTests = [
        ("testShifted", testShifted),
    ]
}

extension SubimageSubscriptTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubimageSubscriptTests = [
        ("testSubimageSubscriptGet", testSubimageSubscriptGet),
        ("testSubimageSubscriptSet", testSubimageSubscriptSet),
    ]
}

extension TransformationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransformationTests = [
        ("testFlipLR", testFlipLR),
        ("testFlipUD", testFlipUD),
        ("testRot", testRot),
    ]
}

extension TransposeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransposeTests = [
        ("testTranspose", testTranspose),
    ]
}

extension vImageUtilsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__vImageUtilsTests = [
        ("testAlphaBlend", testAlphaBlend),
        ("testDilate", testDilate),
        ("testErode", testErode),
        ("testMax", testMax),
        ("testMin", testMin),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AbsTests.__allTests__AbsTests),
        testCase(AffineTransformationTests.__allTests__AffineTransformationTests),
        testCase(AppKitTests.__allTests__AppKitTests),
        testCase(BayerTests.__allTests__BayerTests),
        testCase(BicubicInterpolationTests.__allTests__BicubicInterpolationTests),
        testCase(BilinearInterpolationTests.__allTests__BilinearInterpolationTests),
        testCase(BitOperationsTests.__allTests__BitOperationsTests),
        testCase(ChannelCompositionTests.__allTests__ChannelCompositionTests),
        testCase(ChannelSubscriptTests.__allTests__ChannelSubscriptTests),
        testCase(ChannelwiseConversionTests.__allTests__ChannelwiseConversionTests),
        testCase(CheckBoolTests.__allTests__CheckBoolTests),
        testCase(ClampTests.__allTests__ClampTests),
        testCase(ClipTests.__allTests__ClipTests),
        testCase(ColorArithmeticTests.__allTests__ColorArithmeticTests),
        testCase(ComplexTests.__allTests__ComplexTests),
        testCase(ConcatenateTests.__allTests__ConcatenateTests),
        testCase(ConvolutionTests.__allTests__ConvolutionTests),
        testCase(CorrelationTests.__allTests__CorrelationTests),
        testCase(DataTypeConversionTests.__allTests__DataTypeConversionTests),
        testCase(DrawTests.__allTests__DrawTests),
        testCase(EdgeModeTests.__allTests__EdgeModeTests),
        testCase(ExtremaTests.__allTests__ExtremaTests),
        testCase(FilterTests.__allTests__FilterTests),
        testCase(Im2colTests.__allTests__Im2colTests),
        testCase(ImageArithmeticTests.__allTests__ImageArithmeticTests),
        testCase(ImageIOTests.__allTests__ImageIOTests),
        testCase(ImageTests.__allTests__ImageTests),
        testCase(IntegralImageTests.__allTests__IntegralImageTests),
        testCase(LikeInitializerTests.__allTests__LikeInitializerTests),
        testCase(NearestNeighborInterpolatorTests.__allTests__NearestNeighborInterpolatorTests),
        testCase(PaddingTests.__allTests__PaddingTests),
        testCase(PixelIteratorTests.__allTests__PixelIteratorTests),
        testCase(PixelRefArithmeticTests.__allTests__PixelRefArithmeticTests),
        testCase(PixelSubscriptTests.__allTests__PixelSubscriptTests),
        testCase(PixelTypeConversionTests.__allTests__PixelTypeConversionTests),
        testCase(PixelwiseConversion.__allTests__PixelwiseConversion),
        testCase(PowerTests.__allTests__PowerTests),
        testCase(ProjectiveTransformationTests.__allTests__ProjectiveTransformationTests),
        testCase(RepeatedTests.__allTests__RepeatedTests),
        testCase(ResizeTests.__allTests__ResizeTests),
        testCase(RoundingTests.__allTests__RoundingTests),
        testCase(ShiftTests.__allTests__ShiftTests),
        testCase(SubimageSubscriptTests.__allTests__SubimageSubscriptTests),
        testCase(TransformationTests.__allTests__TransformationTests),
        testCase(TransposeTests.__allTests__TransposeTests),
        testCase(vImageUtilsTests.__allTests__vImageUtilsTests),
    ]
}
#endif
